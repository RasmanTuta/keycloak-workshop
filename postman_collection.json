{
	"info": {
		"_postman_id": "9dcfe2fd-8f07-4fe8-bb66-2bb1783f6b7e",
		"name": "Keycloak Workshop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "514300"
	},
	"item": [
		{
			"name": "Authenticate Raw Image",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "change_me",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "account",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/realms/master/protocol/openid-connect/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"realms",
						"master",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"token\", jsonData.access_token);\r",
							"var now = new Date().getTime() / 1000;\r",
							"pm.collectionVariables.set(\"expire\", Math.floor(now + jsonData.expires_in));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{client}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client-secret}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "totp",
							"value": "728303",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{keycloak-url}}/realms/{{realm}}/protocol/openid-connect/token",
					"host": [
						"{{keycloak-url}}"
					],
					"path": [
						"realms",
						"{{realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:9000/fruits",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-list unauthenticated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/fruits/unauthenticated",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits",
						"unauthenticated"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-list authenticated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:9000/fruits/authenticated",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits",
						"authenticated"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-get strawberry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:9000/fruits/strawberry",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits",
						"strawberry"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-get secret",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:9000/fruits/secret",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits",
						"secret"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Coconut\",\r\n    \"description\": \"Hard fruit\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/fruits",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits"
					]
				}
			},
			"response": []
		},
		{
			"name": "fruits-delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:9000/fruits/Coconut",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"fruits",
						"Coconut"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"var expire = pm.collectionVariables.get(\"expire\");\r",
					"var now = new Date().getTime() / 1000;\r",
					"\r",
					"if(now > expire\r",
					"    && pm.info.requestName !== \"Authenticate Raw Image\"\r",
					"    && pm.info.requestName !== \"Authenticate\"){\r",
					"    pm.sendRequest({\r",
					"        url: pm.environment.get(\"keycloak-url\") + \"/realms/\" + pm.environment.get(\"realm\") + \"/protocol/openid-connect/token\",\r",
					"        method: 'POST',\r",
					"        header: {\r",
					"            'content-type': 'application/x-www-form-urlencoded',\r",
					"            'Accept': \"application/json\"\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'urlencoded',\r",
					"            urlencoded:\r",
					"            [\r",
					"                {key: 'client_id',value: pm.environment.get(\"client\")},\r",
					"                {key: 'grant_type',value: 'password'},\r",
					"                {key: 'username',value: pm.environment.get(\"username\")},\r",
					"                {key: 'password',value: pm.environment.get(\"password\")},\r",
					"            ]\r",
					"        }\r",
					"    },function (err, response) {\r",
					"        console.log(response.json());\r",
					"        var jsonData = response.json();\r",
					"        pm.collectionVariables.set(\"token\", jsonData.access_token);\r",
					"        var now = new Date().getTime() / 1000;\r",
					"        pm.collectionVariables.set(\"expire\", Math.floor(now + jsonData.expires_in));\r",
					"\r",
					"    });\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "expire",
			"value": "0",
			"type": "string"
		}
	]
}